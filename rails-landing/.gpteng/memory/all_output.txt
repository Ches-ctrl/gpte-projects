Creating a full-fledged Rails application that clones the functionality of ChatGPT is a complex task that involves setting up a Rails project, creating models, controllers, views, and integrating with an AI language model like OpenAI's GPT-3. Given the complexity, I will provide a simplified version of such an application.

The core components of this Rails application will include:

1. `Message` model: To store user inputs and AI responses.
2. `MessagesController`: To handle the creation of messages and interaction with the AI model.
3. `OpenAIChatService`: A service class to interact with the OpenAI API.
4. Views: To display the chat interface to the user.
5. Routes: To define the HTTP endpoints for the application.

Let's start by setting up the Rails project and creating the necessary files step by step.

First, we need to create a new Rails application. Open your terminal and run the following command:

```bash
rails new chatgpt_clone --skip-test --database=postgresql
```

This command creates a new Rails application with PostgreSQL as the database and skips the default test setup since we will not be covering tests in this example.

Next, we need to create the `Message` model and the corresponding database migration.

chatgpt_clone/app/models/message.rb
```ruby
class Message < ApplicationRecord
  # This model represents a message in the chat, which could be either from the user or the AI.
end
```

chatgpt_clone/db/migrate/TIMESTAMP_create_messages.rb
```ruby
class CreateMessages < ActiveRecord::Migration[6.1]
  def change
    create_table :messages do |t|
      t.text :content
      t.boolean :is_user_message

      t.timestamps
    end
  end
end
```

Now, let's create the `MessagesController` with actions to display and create messages.

chatgpt_clone/app/controllers/messages_controller.rb
```ruby
class MessagesController < ApplicationController
  def index
    @messages = Message.all
  end

  def create
    user_message = Message.create(content: message_params[:content], is_user_message: true)
    ai_response = OpenAIChatService.get_response(user_message.content)
    Message.create(content: ai_response, is_user_message: false)

    redirect_to messages_path
  end

  private

  def message_params
    params.require(:message).permit(:content)
  end
end
```

Next, we'll create the `OpenAIChatService` to handle communication with the OpenAI API.

chatgpt_clone/app/services/open_ai_chat_service.rb
```ruby
require 'openai'

class OpenAIChatService
  def self.get_response(message)
    # This method will send the user's message to OpenAI's API and return the AI's response.
    # You will need to set up an OpenAI API key and add it to your environment variables.
    OpenAI.api_key = ENV['OPENAI_API_KEY']

    response = OpenAI::ChatCompletion.create(
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: "You are a helpful assistant." },
        { role: "user", content: message }
      ]
    )

    response['choices'].first['message']['content']
  rescue OpenAI::Error => e
    Rails.logger.error "OpenAI error: #{e.message}"
    "Sorry, I can't process your message right now."
  end
end
```

We need to add the OpenAI gem to our Gemfile.

chatgpt_clone/Gemfile
```ruby
# Add this line to your Gemfile
gem 'openai'
```

After adding the gem, run `bundle install` to install the OpenAI gem.

Next, we'll set up the views for displaying the chat interface and handling message creation.

chatgpt_clone/app/views/messages/index.html.erb
```erb
<h1>Chat with GPT Clone</h1>

<div id="chat-box">
  <% @messages.each do |message| %>
    <% if message.is_user_message %>
      <div class="user-message"><%= message.content %></div>
    <% else %>
      <div class="ai-message"><%= message.content %></div>
    <% end %>
  <% end %>
</div>

<%= form_with(url: messages_path, method: :post, local: true) do |form| %>
  <div>
    <%= form.text_area :content %>
  </div>
  <div>
    <%= form.submit "Send" %>
  </div>
<% end %>
```

Finally, we need to define the routes for our application.

chatgpt_clone/config/routes.rb
```ruby
Rails.application.routes.draw do
  resources :messages, only: [:index, :create]
  root 'messages#index'
end
```

Before running the application, you need to set up the database and run migrations:

```bash
rails db:create db:migrate
```

To start the Rails server, run:

```bash
rails server
```

This concludes a simplified version of a Rails application that clones the functionality of ChatGPT. It's important to note that this implementation is not production-ready and lacks many features and considerations such as user authentication, background processing for AI interactions, and comprehensive error handling.